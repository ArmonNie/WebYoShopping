<?xml version="1.0" encoding="UTF-8"?>
<!-- Spring配置文件功能
1.导入数据库properties文件以及配置数据源即Mysql
2.事务管理并开启事务注解
3.管理bean（IoC）-->

<!-- 关于根元素beans的写法？？？ -->
<beans 
 	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
    	http://www.springframework.org/schema/context/spring-context-4.2.xsd
    	http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<!-- 引入数据库配置文件 -->  
    <!-- <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>  --> 
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 定义数据源Bean，对应与jdbc.propertises文件中定义的属性 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${jdbc.initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <!-- <property name="maxActive" value="${jdbc.maxActive}"></property> -->  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${jdbc.minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <!-- <property name="maxWait" value="${jdbc.maxWait}"></property>  --> 
    </bean>
	<!-- (事务管理)transaction manager, 
	use JtaTransactionManager for global tx
	事务管理依赖数据源 -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
    <!--  开启事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
    
     <!-- 配置MyBatis工厂
     spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
       <!--  注入数据源，对应本文件之前配置的数据源 -->
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描核心配置文件 -->  
        <!-- <property name="mapperLocations"  value="classpath:com/yoshopping/mapping/*.xml"></property> --> 
        <property name="configLocation"  value="classpath:mybatis-config.xml"></property>   
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.yoshopping.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean> -->
  
	<!--   实例化DAO -->
    <bean id="userDao" class="com.yoshopping.daoimpl.UserDaoImpl">  
    	<!-- 注入sqlSessionFactory  --> 
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>  
    </bean>
</beans>